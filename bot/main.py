from aiogram import F, types

from aiogram.filters.command import Command
from aiogram.enums.chat_type import ChatType

from aiogram.filters import ChatMemberUpdatedFilter
from aiogram.filters.chat_member_updated import JOIN_TRANSITION

import asyncio

from config import bot, dp, private_rt, group_rt, channel_rt, CHANNEL_ID, GROUP_ID, WELCOME_IMAGE_LINK
from handlers import welcome, start_private
from filters import PrivateRouterFilter, GroupRouterFilter, ChannelRouterFilter


private_rt.message.filter(PrivateRouterFilter())
group_rt.message.filter(GroupRouterFilter())
channel_rt.message.filter(ChannelRouterFilter())

private_rt.channel_post.filter(PrivateRouterFilter())
group_rt.channel_post.filter(GroupRouterFilter())
channel_rt.channel_post.filter(ChannelRouterFilter())

private_rt.chat_member.filter(PrivateRouterFilter())
group_rt.chat_member.filter(GroupRouterFilter())
channel_rt.chat_member.filter(ChannelRouterFilter())

dp.include_routers(group_rt, private_rt, channel_rt)


@group_rt.chat_member(ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION))
async def welcome(event: types.ChatMemberUpdated):

    if event.new_chat_member.user.is_bot is False:

        name_with_link = f'[{event.new_chat_member.user.full_name}]({event.new_chat_member.user.username})'
        name_without_link = event.new_chat_member.user.full_name

        await event.answer_photo(
            photo=WELCOME_IMAGE_LINK,
            caption=f'''üî¥–ü—Ä–∏–≤–µ—Ç, {name_without_link if type(event.new_chat_member.user.username) is None else name_with_link}üëãüëãüëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç\. –£ –Ω–∞—Å —Ç—É—Ç –ø—Ä–∞–≤–∏–ª–∞, –≤—Å—ë –∫–∞–∫ –≤–µ–∑–¥–µ:

üëâ –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö, –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –Ω–∏–º —Ç–∞–∫, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–Ω–æ—Å–∏–ª–∏—Å—å –∫ –≤–∞–º

üëâ –ù–∏–∫–æ–≥–æ –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ, –Ω–µ –Ω—É–∂–Ω–æ –ø–ª–æ–¥–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏—é\. –î–∞–≤–∞–π—Ç–µ –ª—É—á—à–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –¥–æ–±—Ä–æ–µ –æ–±—â–µ–Ω–∏–µ\)

üëâ –ù–∏–∫–∞–∫–æ–π —Ä–µ–∫–ª–∞–º—ã –≤ —á–∞—Ç–µ, –ø–æ–Ω—è—Ç–Ω–æ?üòâ

üëâ –ù–µ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å—é–¥–∞ —à–æ–∫–∏—Ä—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—é

üëâ –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã

‚ùóÔ∏è –ó–∞–Ω—É–¥—Å—Ç–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å\)''',
            parse_mode='MarkdownV2'
        )

    else:
        await event.answer('–ë–æ—Ç–∞–º –Ω–µ –º–µ—Å—Ç–æ –≤ —á–∞—Ç–µ!')
        await bot.ban_chat_member(revoke_messages=True, chat_id=event.chat.id, user_id=event.new_chat_member.user.id)

@private_rt.message(Command('start'))
async def start_private(command: types.Message):
    await command.reply('''–ü—Ä–∏–≤–µ—Ç–∏–∫üëãüëã
–∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∞–º–∏ –∫–∞–Ω–∞–ª–∞. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–æ–æ–±—â–µ–Ω–∏—è, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å''')


async def start():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(start())
